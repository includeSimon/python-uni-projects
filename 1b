#1b
'''
Ideea solutiei: voi crea submultimi ale lui v si verific daca sunt sortate, returnand lungimea maxima
Observatii:
    1. Pentru multimea v1 = [5,6,4], submultimile vor fi [5,6], [5,6,4], [6,4]
       Pentru multimea v2 = [1,2,3,4], submultimile vor fi [1,2], [1,2,3], [1,2,3,4], [2,3,4], [3,4]
'''
import random
v = [random.randint(-100,101) for i in range(15)] #creez o lista random

lungimeMaxima = 1
inceput = 0         #va fi primul element din lista, la care se adauga elemente cate 1 pe rand ca in ex. de mai sus
submultimeMaxima = []

while inceput < len(v):
    for i in range(len(v) - inceput):
        submultime = v[inceput:inceput + i + 1]     #creez o submultime din ce in ce mai mare, iar +1 este deoarece v[a:b], b va fi cu 1 mai mic, ca la range(a,b)
                                                    # de ex, v are 6 elemente, daca scriu v[6] imi da eroare, insa v[1:6] e ok
        if submultime == sorted(submultime):        #verific daca este sortata
            if len(submultime) > lungimeMaxima:
                lungimeMaxima = len(submultime)
                submultimeMaxima = submultime
    inceput += 1
    
print(lungimeMaxima)
print("Multimea initiala: ", v)
print("Submultimea de lungime maxima: ", submultimeMaxima)

'''
Observatie: Ca sa se inteleaga mai usor procesul de formare al listelor, daca avem urmatorul cod:

inceput = 0
while inceput < len(v):
    for i in range(len(v) - inceput):
        submultime = v[inceput:inceput + i + 1]
        print(submultime)
    inceput += 1
    
Atunci rezultatul va fi:
[8]
[8, 5]
[8, 5, 7]
[8, 5, 7, 8]
[8, 5, 7, 8, 1]
[8, 5, 7, 8, 1, 6]
[8, 5, 7, 8, 1, 6, 2]
[5]
[5, 7]
[5, 7, 8]
[5, 7, 8, 1]
[5, 7, 8, 1, 6]
[5, 7, 8, 1, 6, 2]
[7]
[7, 8]
[7, 8, 1]
[7, 8, 1, 6]
[7, 8, 1, 6, 2]
[8]
[8, 1]
[8, 1, 6]
[8, 1, 6, 2]
[1]
[1, 6]
[1, 6, 2]
[6]
[6, 2]
[2]
'''
